#include <Adafruit_NeoPixel.h>
#include <DHT20.h>
#include <LiquidCrystal_I2C.h>
#include <Arduino.h>
#include <WiFi.h>
#include <HCSR04.h>
#include <TM1637Display.h>
#include "Adafruit_MQTT.h"
#include "Adafruit_MQTT_Client.h"
#include "ESPAsyncWebServer.h" 


#define LED_BUILTIN 48
#define D5 8
#define D3 6
#define A0 1
#define A1 2
#define SDA 11
#define SCL 12

#define WLAN_SSID "Redmi"
#define WLAN_PASS "123456789"
// #define AIO_SERVER      "io.adafruit.com"
// #define AIO_SERVERPORT  1883
// #define AIO_USERNAME    "justacow224" // NPNLab_BBC
// #define AIO_KEY         "aio_wvKk22tg1OSLbvcnID5TCWHCQr4j"

// #define OHS_SERVER      "mqtt.ohstem.vn"
// #define OHS_SERVERPORT  1883
// #define OHS_USERNAME    "abcd0386433465"
// #define OHS_KEY         "12345678"


// #define BKTK_SERVER      "mqttserver.tk"
// #define BKTK_SERVERPORT  1883
// #define BKTK_USERNAME    "innovation"
// #define BKTK_KEY         "Innovation_RgPQAZoA5N"



WiFiClient client;
// Adafruit_MQTT_Client mqtt(&client, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_USERNAME, AIO_KEY);
//Adafruit_MQTT_Client mqtt(&client, OHS_SERVER, OHS_SERVERPORT, OHS_USERNAME, OHS_USERNAME, OHS_KEY);
//Adafruit_MQTT_Client mqtt(&client, BKTK_SERVER, BKTK_SERVERPORT, BKTK_USERNAME, BKTK_USERNAME, BKTK_KEY);

/****************************** Feeds ***************************************/

// Setup a feed called 'time' for subscribing to current time
// Adafruit_MQTT_Subscribe timefeed = Adafruit_MQTT_Subscribe(&mqtt, "time/seconds");

// // Setup a feed called 'slider' for subscribing to changes on the slider
// Adafruit_MQTT_Subscribe slider = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/slider", MQTT_QOS_1);

// // Setup a feed called 'onoff' for subscribing to changes to the button
// Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/onoff", MQTT_QOS_1);
// //Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, OHS_USERNAME "/feeds/V1", MQTT_QOS_1);

// Setup a feed called 'taskblink_sub' for subscribing to changes on the blink
// Adafruit_MQTT_Subscribe taskblink_sub = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/taskblink", MQTT_QOS_1);

// Setup a feed called 'tasktemperature_sub' for subscribing to changes on the temperature
// Adafruit_MQTT_Subscribe  tasktemperature_sub = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/tasktemperature", MQTT_QOS_1);

// Setup a feed called 'taskhumiditye_sub' for subscribing to changes on the humidity
// Adafruit_MQTT_Subscribe  taskhumidity_sub = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/taskhumidity", MQTT_QOS_1);

// Setup a feed called 'tasksoilmoisture_sub' for subscribing to changes on the moisture rate
// Adafruit_MQTT_Subscribe tasksoilmoisture_sub = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/tasksoilmoisture", MQTT_QOS_1);

// Setup a feed called 'tasksoilrelay_sub' for subscribing to changes on the soil relay
// Adafruit_MQTT_Subscribe tasksoilrelay_sub = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/tasksoilrelay", MQTT_QOS_1);

// Setup a feed called 'tasklight_sub' for subscribing to changes on the light
// Adafruit_MQTT_Subscribe tasklight_sub = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/tasklight", MQTT_QOS_1);

// Setup a feed called 'tasklightled_sub' for subscribing to changes on the light
// Adafruit_MQTT_Subscribe tasklightled_sub = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/tasklightled", MQTT_QOS_1);

// // Setup a feed called 'photocell' for publishing.
// Adafruit_MQTT_Publish sensory = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/sensory");
// //Adafruit_MQTT_Publish sensory = Adafruit_MQTT_Publish(&mqtt, OHS_USERNAME "/feeds/V20");

// Setup a feed called 'taskblink_pub' for publishing.
// Adafruit_MQTT_Publish taskblink_pub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/taskblink");

// Setup a feed called 'tasktemperature_pub' for publishing.
// Adafruit_MQTT_Publish tasktemperature_pub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/tasktemperature");

// Setup a feed called 'taskhumidity_pub' for publishing.
// Adafruit_MQTT_Publish taskhumidity_pub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/taskhumidity");

// Setup a feed called 'tasksoilmoisture' for publishing.
// Adafruit_MQTT_Publish tasksoilmoisture_pub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/tasksoilmoisture");

// Setup a feed called 'tasksoilrelay_pub' for publishing.
// Adafruit_MQTT_Publish tasksoilrelay_pub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/tasksoilrelay");

// Setup a feed called 'tasklight_pub' for publishing.
// Adafruit_MQTT_Publish tasklight_pub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/tasklight");

// Setup a feed called 'tasklightled_pub' for publishing.
// Adafruit_MQTT_Publish tasklightled_pub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/tasklightled");

// Define your tasks here
void TaskBlink(void *pvParameters);
void TaskTemperatureHumidity(void *pvParameters);
void TaskSoilMoistureAndRelay(void *pvParameters);
void TaskLightAndLED(void *pvParameters);
void TaskDistanceMeasure(void *pvParameters);
//Define your components here
Adafruit_NeoPixel pixels3(4, D5, NEO_GRB + NEO_KHZ800);
DHT20 dht20;
LiquidCrystal_I2C lcd(33,16,2);
UltraSonicDistanceSensor distance(10, 17);
// WebServer server(80);
AsyncWebServer server(80);
int CLK0P = 18;
int DIO = 21;

// Tạo đối tượng hiển thị TM1637
TM1637Display display = TM1637Display(CLK0P, DIO);


void MQTT_connect() {
  int8_t ret;

  // Stop if already connected.
  // if (mqtt.connected()) {
  //   return;
  // }

  Serial.print("Connecting to MQTT... ");

  uint8_t retries = 3;
  // while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
  //   Serial.println(mqtt.connectErrorString(ret));
  //   Serial.println("Retrying MQTT connection in 10 seconds...");
  //   mqtt.disconnect();
  //   delay(10000);  // wait 10 seconds
  //   retries--;
  //   if (retries == 0) {
  //     // basically die and wait for WDT to reset me
  //     while (1);
  //   }
  // }
  // Serial.println("MQTT Connected!");
}

String readTemperature() {
  dht20.read();
  double t = dht20.getTemperature();
  if (isnan(t)) {    
    Serial.println("Failed to read temperature!");
    return "--";
  }
  return String(t);
}

String readHumidity() {
  dht20.read();
  double h = dht20.getHumidity();
  if (isnan(h)) {
    Serial.println("Failed to read humidity!");
    return "--";
  }
  return String(h);
}

String readDistance() {
  int d = distance.measureDistanceCm(dht20.getTemperature());
  if (d < 0) {
    Serial.println("Failed to read distance!");
    return "--";
  }
  return String(d);
}

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">
  <style>
    html {
     font-family: Arial;
     display: inline-block;
     margin: 0px auto;
     text-align: center;
    }
    h2 { font-size: 3.0rem; }
    p { font-size: 3.0rem; }
    .units { font-size: 1.2rem; }
    .dht-labels{
      font-size: 1.5rem;
      vertical-align:middle;
      padding-bottom: 15px;
    }
    .fas, .fa {
      font-size: 3.0rem;
      padding: 0.3rem;
    }
  </style>
</head>
<body>
  <h2>ESP32 DHT Server</h2>
  <p>
    <i class="fas fa-thermometer-half" style="color:#059e8a;"></i> 
    <span class="dht-labels">Temperature</span> 
    <span id="temperature">%TEMPERATURE%</span>
    <sup class="units">&deg;C</sup>
  </p>
  <p>
    <i class="fas fa-tint" style="color:#00add6;"></i> 
    <span class="dht-labels">Humidity</span>
    <span id="humidity">%HUMIDITY%</span>
    <sup class="units">&percnt;</sup>
  </p>
  <p>
    <i class="fa fa-ruler" style="color:#464646;"></i>
    <span class="dht-labels">Distance</span>
    <span id="distance">%DISTANCE%</span>
    <sup class="units">cm</sup>
  </p>
</body>
<script>
setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("temperature").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/temperature", true);
  xhttp.send();
}, 10000 );

setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("humidity").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/humidity", true);
  xhttp.send();
}, 10000 );

setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("distance").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/distance", true);
  xhttp.send();
}, 10000 );
</script>
</html>)rawliteral";

// Replaces placeholder with DHT values
String processor(const String& var){
  //Serial.println(var);
  if(var == "TEMPERATURE"){
    return readTemperature();
  }
  else if(var == "HUMIDITY"){
    return readHumidity();
  }
  else if(var == "DISTANCE"){
    return readDistance();
  }
  return String();
}

// Add this to your setup() function after WiFi connection is established
void setupWebServer() {
  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html, processor);
  });

  server.on("/temperature", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", readTemperature().c_str());
  });

  server.on("/humidity", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", readHumidity().c_str());
  });

  server.on("/distance", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", readDistance().c_str());
  });

  // Start server
  server.begin();
}

void setup() {

  // Initialize serial communication at 115200 bits per second:
  Serial.begin(115200); 

  Wire.begin(SDA, SCL);
  dht20.begin();
  lcd.begin();
  pixels3.begin();


  WiFi.begin(WLAN_SSID, WLAN_PASS);
  delay(2000);

  while (WiFi.status() != WL_CONNECTED) { 
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  // mqtt.subscribe(&slider);
  // mqtt.subscribe(&onoffbutton);
  // mqtt.subscribe(&taskblink_sub);
  // mqtt.subscribe(&tasktemperature_sub);
  // mqtt.subscribe(&taskhumidity_sub);
  // mqtt.subscribe(&tasksoilmoisture_sub);
  // mqtt.subscribe(&tasksoilrelay_sub);
  // mqtt.subscribe(&tasklight_sub);
  // mqtt.subscribe(&tasklightled_sub);

  setupWebServer(); 
  // xTaskCreate( TaskBlink, "Task Blink" ,2048  ,NULL  ,2 , NULL);
  xTaskCreate( TaskTemperatureHumidity, "Task Temperature" ,2048  ,NULL  ,2 , NULL);
  // xTaskCreate( TaskSoilMoistureAndRelay, "Task Soild Relay" ,2048  ,NULL  ,2 , NULL);
  // xTaskCreate( TaskLightAndLED, "Task Light LED" ,2048  ,NULL  ,2 , NULL);
  xTaskCreate( TaskDistanceMeasure, "Task Distance Measure" ,2048  ,NULL  ,2 , NULL);
  
  //Now the task scheduler is automatically started.
  Serial.printf("Basic Multi Threading Arduino Example\n");
  
  
  
}
int pubCount = 0;
void loop() {
  // MQTT_connect();
  // mqtt.processPackets(10000);
  // if(! mqtt.ping()) {
  //   mqtt.disconnect();
  // }
}



/*--------------------------------------------------*/
/*---------------------- Tasks ---------------------*/
/*--------------------------------------------------*/


// uint32_t x=0;
void TaskBlink(void *pvParameters) {  // This is a task.
  //uint32_t blink_delay = *((uint32_t *)pvParameters);

  // initialize digital LED_BUILTIN on pin 13 as an output.
  pinMode(LED_BUILTIN, OUTPUT);
  

  while(1) {                          
    digitalWrite(LED_BUILTIN, HIGH);  // turn the LED ON
    Serial.println("LED ON");
    delay(1000);

    // taskblink_pub.publish(blinkState);
    digitalWrite(LED_BUILTIN, LOW);  // turn the LED OFF
    Serial.println("LED OFF");
    delay(1000);

    // taskblink_pub.publish(blinkState);
    // if (sensory.publish(x++)) {
    //   Serial.println(F("Published successfully!!"));
    // }
  }
}


void TaskTemperatureHumidity(void *pvParameters) {  // This is a task.
  //uint32_t blink_delay = *((uint32_t *)pvParameters);

  while(1) {                          
    Serial.println("Task Temperature and Humidity");
    dht20.read();
    Serial.println(dht20.getTemperature());
    // tasktemperature_pub.publish(dht20.getTemperature());
    Serial.println(dht20.getHumidity());
    // taskhumidity_pub.publish(dht20.getHumidity());
    
    // lcd.clear();
    // lcd.setCursor(0, 0);
    // lcd.print(dht20.getTemperature());
    // lcd.setCursor(0, 1);
    // lcd.print(dht20.getHumidity());

    delay(5000);
  }
}



void TaskDistanceMeasure(void *pvParameters) {
  while (1) {
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());
    Serial.println("Distance Measure");
    int distance_cm = distance.measureDistanceCm(dht20.getTemperature());
    Serial.print(distance_cm);
    Serial.println(" cm");
    display.clear();
    display.setBrightness(7);
    display.showNumberDec(distance_cm);
    vTaskDelay(5000);
  }
  
}

void TaskSoilMoistureAndRelay(void *pvParameters) {  // This is a task.
  //uint32_t blink_delay = *((uint32_t *)pvParameters);

  pinMode(D3, OUTPUT);

  while(1) {                          
    Serial.println("Task Soild and Relay");
    Serial.println(analogRead(A0));
    // tasksoilmoisture_pub.publish(uint32_t(analogRead(A0)));
    
    if(analogRead(A0) > 500){
      digitalWrite(D3, LOW);
      uint32_t relayState = 0;
      // tasksoilrelay_pub.publish(relayState);
    }
    if(analogRead(A0) < 50){
      digitalWrite(D3, HIGH);
      uint32_t relayState = 1;
      // tasksoilrelay_pub.publish(relayState);
    }
    delay(5000);
  }
}


void TaskLightAndLED(void *pvParameters) {  // This is a task.
  //uint32_t blink_delay = *((uint32_t *)pvParameters);

  while(1) {                          
    Serial.println("Task Light and LED");
    Serial.println(analogRead(A1));
    // tasklight_pub.publish(uint32_t(analogRead(A1)));
    if(analogRead(A1) < 350){
      pixels3.setPixelColor(0, pixels3.Color(255,0,0));
      pixels3.setPixelColor(1, pixels3.Color(255,0,0));
      pixels3.setPixelColor(2, pixels3.Color(255,0,0));
      pixels3.setPixelColor(3, pixels3.Color(255,0,0));
      pixels3.show();
      uint32_t lightLedState = 1;
      // tasklightled_pub.publish(lightLedState);
    }
    if(analogRead(A1) > 550){
      pixels3.setPixelColor(0, pixels3.Color(0,0,0));
      pixels3.setPixelColor(1, pixels3.Color(0,0,0));
      pixels3.setPixelColor(2, pixels3.Color(0,0,0));
      pixels3.setPixelColor(3, pixels3.Color(0,0,0));
      pixels3.show();
      uint32_t lightLedState = 0;
      // tasklightled_pub.publish(lightLedState);
    }
    delay(5000);
  }
}

/*//*/